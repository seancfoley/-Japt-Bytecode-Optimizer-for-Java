<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Generator content="Microsoft Word 15 (filtered)">
<title>Japt is a tool for optimizing java programs</title>
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman",serif;}
h1
	{margin:0in;
	margin-bottom:.0001pt;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Times New Roman",serif;
	font-weight:normal;}
h2
	{margin:0in;
	margin-bottom:.0001pt;
	page-break-after:avoid;
	font-size:12.0pt;
	font-family:"Times New Roman",serif;}
h3
	{margin:0in;
	margin-bottom:.0001pt;
	page-break-after:avoid;
	font-size:16.0pt;
	font-family:"Times New Roman",serif;
	font-weight:normal;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman",serif;
	color:black;}
p.MsoBodyText2, li.MsoBodyText2, div.MsoBodyText2
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";}
p.MsoBlockText, li.MsoBlockText, div.MsoBlockText
	{margin-top:0in;
	margin-right:-.5in;
	margin-bottom:0in;
	margin-left:-.5in;
	margin-bottom:.0001pt;
	text-autospace:none;
	font-size:8.0pt;
	font-family:"Courier New";
	color:black;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;}
@page WordSection1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;}
div.WordSection1
	{page:WordSection1;}
-->
</style>

</head>

<body lang=EN-US link=blue vlink=purple>

<div class=WordSection1>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>Back to <a
href="index.html">Project Pages Home</a></span></p>

<p class=MsoNormal><b><span style='font-size:20.0pt;font-family:"Arial",sans-serif'>&nbsp;</span></b></p>

<p class=MsoNormal><b><span style='font-size:20.0pt;font-family:"Arial",sans-serif'>JAPT</span></b><span
style='font-size:16.0pt;font-family:"Arial",sans-serif'> (</span><b><i><span
style='font-size:20.0pt;font-family:"Arial",sans-serif'>Ja</span></i></b><span
style='font-size:16.0pt;font-family:"Arial",sans-serif'>va o</span><b><i><span
style='font-size:20.0pt;font-family:"Arial",sans-serif'>pt</span></i></b><span
style='font-size:16.0pt;font-family:"Arial",sans-serif'>imizer)</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>Japt is a tool for
optimizing java programs.  Japt makes use of the JikesBT java class manipulation
library and its own proprietary class manipulation functionality to optimize java
class files.  This lists some of the basic features of Japt.  Advanced extensions
(inlining, reduction, obfuscation, escape analysis, remapping, assembler/disassembler,
instrumentation, etc) are not covered in this document.  This document covers the
basic concepts of Japt from a user’s perspective.</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>1 <a
href="#_1._Japt_Usage">Japt Usage</a></span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>2 <a
href="#_2_Japt_Concepts">Japt Concepts</a></span></p>

<p class=MsoNormal style='text-indent:.5in'><span style='font-family:"Arial",sans-serif'>2.1
<a href="#_2.1_Command_Line">Command Line</a></span></p>

<p class=MsoNormal style='text-indent:.5in'><span style='font-family:"Arial",sans-serif'>2.2
<a href="#_2.2_Extensions">Extensions</a></span></p>

<p class=MsoNormal style='text-indent:.5in'><span style='font-family:"Arial",sans-serif'>2.3
<a href="#_2.3_Internal_and">Internal and External Classes</a></span></p>

<p class=MsoNormal style='text-indent:.5in'><span style='font-family:"Arial",sans-serif'>2.4
<a href="#_2.4_Application_Interface">Application Interface</a></span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>3 <a
href="#_3._Loading_Classes">Loading Classes and Resources with the Load Extension</a></span></p>

<p class=MsoNormal style='text-indent:.5in'><span style='font-family:"Arial",sans-serif'>3.1
<a href="#_3.1_Loading">Loading</a></span></p>

<p class=MsoNormal style='text-indent:.5in'><span style='font-family:"Arial",sans-serif'>3.2
<a href="#_3.4_Wildcards">Wildcards</a></span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>4 <a
href="#_4._Additional_Extensions">Additional Extensions</a></span></p>

<p class=MsoNormal style='text-indent:.5in'><span style='font-family:"Arial",sans-serif'>4.1
<a href="#_4.4_The_Jar">The Jar Generation Extension</a></span></p>

<p class=MsoNormal style='text-indent:.5in'><span style='font-family:"Arial",sans-serif'>4.8
<a href="#_4.6_The_Class">The Class File Generation Extension</a></span></p>

<h1><a name="_1._Japt_Usage"></a><span style='font-size:16.0pt;font-family:
"Arial",sans-serif'>&nbsp;</span></h1>

<h1><span style='font-size:16.0pt;font-family:"Arial",sans-serif'>1. Japt Usage</span></h1>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-family:"Arial",sans-serif'>Not
all options are listed here, the more obscure options are omitted here for the purpose
of clarity.</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>usage: japt [options...]</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    japt optimizes java classes</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>basic options:</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    -help                       print out
this message</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    -version                    print out
program version</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    -sysProps                   print out
the system properties</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    -log xxx                    write to
the named log file</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    -quiet                      quiet mode</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    -macro xxx xxx              define a
macro with the given name and value</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    -noResolveRuntimeRefs       leave method/field
references unresolved</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    -incrementalLoad            turn off
auto load</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    @xxx                        read named
file for additional options</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>load options:</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    -icp xxx                    append named
jar/dir to internal cls srch path</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    -cp xxx                     append named
jar/dir to class search path</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    -loadFile xxx               load named
file as internal classes/resources</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    -loadClass xxx              load named
class(es) (from class path)</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    -loadResource xxx           load named
resource(s) (from class path)</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>                                </span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    -includeClass xxx           include named
class(es)</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    -includeWholeClass xxx      include all
members with the named class(es)</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    -includeLibraryClass xxx    include non-prvt
members with named class(es)</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    -includeAccessibleClass xxx include pub/prot
members with named class(es)</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    -includeField xxx           include named
field(s)</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    -includeMethod xxx          include named
method(s)</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    -includeMainMethod xxx      include main
method with named class(es)</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    -includeMethodEx xxx        include named
method(s) independent of owner</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    -includeExtLibraryClass xxx include non-private
members with named class(es) and known overriding/implementing methods</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    -includeExtAccClass xxx     include public/protected
members with named class(es) and known overriding/implementing methods</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>                          </span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    -startupClass xxx           specify named
manifest main class</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    -verify                     verify internal
classes and methods</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    -optimize                   perform bytecode
optimization</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>program extensions:</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    -extension xxx              use named
program extension</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    The following built-in extensions are
available:</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    -load</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    -dirOutput                  </span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    -jarOutput                  </span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    Combining &quot;-extension xxx&quot;
with &quot;-help&quot; or for example &quot;-inline&quot; with &quot;-help&quot;
will print out the available</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    options for the named extension following
this message.</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>jar generation options:</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    -output xxx                 write to
named output jar file or directory</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    -removeAttribute xxx        remove the
named attribute(s)</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    -removeStackMaps            remove stackmap
table attributes from code</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    -addStackMaps               add stackmap
table attributes to code</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    -excludeResource xxx        exclude the
named resource(s)</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    -includeZippedResources     include resources
contained within archives</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>class generation options:</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    -dir xxx                    write to
named directory</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    -removeAttribute xxx        remove the
named attribute(s)</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    -removeStackMaps            remove stackmap
table attributes from code</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    -addStackMaps               add stackmap
table attributes to code</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    -excludeResource xxx        exclude the
named resource(s)</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New";color:black'>    -includeZippedResources     include resources
contained within archives</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:8.0pt;
font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
font-family:"Courier New"'>&nbsp;</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<h1><a name="_Command_Line"></a><a name="_1.1_Command_Line"></a><a
name="_2.1_Command_Line"></a><a name="_2_Japt_Concepts"></a><span
style='font-size:16.0pt;font-family:"Arial",sans-serif'>2. Japt Concepts</span></h1>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>Users of Japt should
be familiar with several concepts.  </span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>Getting started,
the user should be familiar with the notion of extensions and the intricacies of
the japt command line.</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>In order to make
modifications and optimizations to classes with Japt, the user should be familiar
with the concept of internal versus external classes, as well as the concept of
the application (or library) interface.</span></p>

<p class=MsoNormal>&nbsp;</p>

<h1><span style='font-family:"Arial",sans-serif'>2.1 Command Line</span></h1>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<h2><span style='font-family:"Arial",sans-serif'>Options files</span></h2>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>Japt may read options
from the command line or from options files.  To read options from a file, use the
option  “</span><span style='font-family:"Courier New"'>@fileName</span><span
style='font-family:"Arial",sans-serif'>”.  The options contained in the file will
be parsed immediately when japt encounters the directive.</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<h2><span style='font-family:"Arial",sans-serif'>Macros</span></h2>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>Macros can be useful
if you are creating many options.</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>Use:</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>-macro name value</span> 
</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>This will cause
any appearance of:</span></p>

<p class=MsoNormal> <span style='font-family:"Courier New"'>{{name}}</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>on the command line
or in options files to be replaced with:</span></p>

<p class=MsoNormal> <span style='font-family:"Courier New"'>value</span>  </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>If Japt encounters
an option containing the string  “</span><span style='font-family:"Courier New"'>{{xxx}}</span><span
style='font-family:"Arial",sans-serif'>” for which no macro for xxx was defined,
Japt will search the System properties for the matching value.  </span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>The built-in macros
are:</span></p>

<p class=MsoNormal><i><span style='font-family:"Arial",sans-serif'>current.file.dir</span></i><span
style='font-family:"Arial",sans-serif'>: the directory containing the current options
file</span></p>

<p class=MsoNormal><i><span style='font-family:"Arial",sans-serif'>current.file</span></i><span
style='font-family:"Arial",sans-serif'>: the current options file</span></p>

<p class=MsoNormal><i><span style='font-family:"Arial",sans-serif'>current.character.encoding</span></i><span
style='font-family:"Arial",sans-serif'>: The string returned by the java code</span>
<span style='font-family:"Courier New"'>new OutputStreamWriter(System.out).getEncoding()</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>/: platform independent
path separator</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>For instance, </span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>{{current.file}}</span>
</p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>appearing in an
options file will be converted to the file name.</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<h2><span style='font-family:"Arial",sans-serif'>Specifying extensions</span></h2>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>All work by Japt
is done by extensions.  Extensions are executed in the order that they are specified
on the command line and in options files.  To specify an extension, use  “</span><span
style='font-family:"Courier New"'>-extension extensionName</span><span
style='font-family:"Arial",sans-serif'>”.  Extensions are described further below.</span></p>

<p class=MsoNormal>&nbsp;</p>

<h2><span style='font-family:"Arial",sans-serif'>Log files</span></h2>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>Japt can create
a log file detailing warnings, errors and information produced by Japt and its extensions. 
To specify a log file, use the option  “</span><span style='font-family:"Courier New"'>-log
logFileName</span><span style='font-family:"Arial",sans-serif'>”.</span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New";
color:blue'>&nbsp;</span></p>

<p class=MsoNormal>&nbsp;</p>

<h1><a name="_2.2_Extensions"></a><span style='font-family:"Arial",sans-serif'>2.2
Extensions</span></h1>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>Japt is built with
an extension framework.  An extension is an implementation of the interface com.ibm.ive.tools.japt.commandLine.CommandLineExtension. 
An extension has full access to the JikesBT and Japt public APIs.  Japt executes
extensions one-by-one, with each extension altering the classes loaded and/or stored
by Japt, leaving them in an altered state when the extension has completed execution.</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>Extensions are specified
on the Japt command line, with the option  “</span><span style='font-family:
"Courier New"'>-extension extensionName</span><span style='font-family:"Arial",sans-serif'>”. 
Certain built-in extensions can be specified by their own unique command line options
(for convenience), such as  “</span>-<span style='font-family:"Courier New"'>jarOutput</span><span
style='font-family:"Arial",sans-serif'>”. </span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>The extensions are
executed in the order that they appear on the command line.  </span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>Each extension has
its own extension-specific command line options.  These options must appear after
the extension has been specified on the command line.</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>The same extension
may be executed more than once.  In such cases, extension-specific command line
options apply only to the last extension as specified on the command line.  If an
option is applicable to more than one extension, the same rule applies.</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal>&nbsp;</p>

<h1><a name="_2.3_Internal_and"></a><span style='font-family:"Arial",sans-serif'>2.3
Internal and External Classes</span></h1>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>Japt defines two
types of classes, internal and external.  Internal classes are considered internal
to the application or library at hand.  These classes and resources are considered
part of the working set and can be altered by Japt and any extension of Japt.  External
classes are considered supporting classes and cannot be altered.  When writing classes
and resources to a jar file or other form of output, only the internal classes and
resources will be written.</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>For example, a typical
invocation of Japt might make alterations to the classes of a stand-alone application
but not the J2SE classes that the application requires.  </span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>Whether a class
is an internal class depends upon which class path location it originates from. 
Each class path location is identified as either internal or external.  </span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<h1><a name="_2.4_Application_Interface"></a><span style='font-family:"Arial",sans-serif'>2.4
Application Interface</span></h1>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>When invoking Japt,
if the user intends to make modifications to the internal classes and resources,
the user must be careful to explicitly indicate the entire interface of the application. 
The interface consists of all elements of the internal classes and resources that
may be accessed from outside the application or library, either from the external
classes or from elsewhere.</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>The identifying
characteristics of such elements cannot change, so that the application can be accessed
in exactly the same manner regardless of the internal modifications by Japt.  </span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>For example, Japt
might change or remove methods and fields in an application library, but the identifying
characteristics of the API cannot change.  API methods cannot be removed, their
names cannot change, their arguments cannot change, their access permission modifiers
cannot be made more restrictive, and so on.<br>
<br>
</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>For a stand-alone
application, the interface often consists of just the main method and its containing
class which is invoked by the java virtual machine at startup.  For libraries, the
interface consists of the complete public API.  For integrated apps like servlets,
the interface consists of the specially predefined classes in the application that
may be instantiated, or the methods in the application that may be invoked from
an outside source.  </span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>If a class is part
of the interface, then this does not necessarily mean that its contents are also
part of the interface, and vice-versa.</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>For instance, an
internal class that is subclassed by an external class may be part of the interface
(the internal class is accessed externally through the action of inheritance), but
if none of the internal class methods or fields are accessed from elsewhere then
the contents of that class are not part of the interface.</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>By the same token,
an internal class C that subclasses an external class D might not necessarily be
part of the application interface, but if that class C overrides methods in D, then
those overriding methods may be part of the application interface, since they can
be invoked externally.</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>The use of the reflection
API in java may also create elements of the interface.  Any class accessed by the
Class.forName construct or the  “.class” contruct may become part of the interface,
for such classes can then be entered dynamically at run-time by the virtual machine.</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<h1><a name="_3._Loading_Classes"></a><span style='font-family:"Arial",sans-serif'>3.
Loading Classes and Resources</span></h1>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>Before any class
manipulations or optimizations can begin, japt will load the classes and resources
as specified, making its own use of the load extension.</span></p>

<p class=MsoNormal>&nbsp;</p>

<h1><a name="_3.1_The_Load"></a><a name="_3.1_Loading"></a><span
style='font-family:"Arial",sans-serif'>3.1 The Load Extension</span></h1>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>When loading, the
user must distinguish between the internal and external classes.  All internal classes
must be loaded.  Japt need not load all external classes to function properly, but
it is generally beneficial, so it is advisable to load all external classes even
though they cannot be changed.</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>To specify a location
on the classpath that will be used to load internal classes, the  “</span><span
style='font-family:"Courier New"'>-icp</span><span style='font-family:"Arial",sans-serif'>”
class path option is used.  Additionally, internal class path locations are specified
with the  “</span><span style='font-family:"Courier New"'>-loadFile</span><span
style='font-family:"Arial",sans-serif'>” option, the difference being that all classes
found at that location will be loaded immediately.  For external class path locations,
the  “</span><span style='font-family:"Courier New"'>-cp</span><span
style='font-family:"Arial",sans-serif'>” class path option is used.  </span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal style='line-height:12.0pt;text-autospace:none'><span
style='font-family:"Arial",sans-serif;color:black'>To load classes, the user must
generally identify the complete interface and specify the interface using options
of the form  “</span><span style='font-family:"Courier New";color:black'>-includeXXX</span><span
style='font-family:"Arial",sans-serif;color:black'>”.  Any class, method, field
or resource that is included is considered part of the interface.  This will cause
the interface and all supporting classes to be loaded.  In general, this is enough
to load all required internal and external classes.</span></p>

<p class=MsoNormal style='line-height:12.0pt;text-autospace:none'><span
style='font-family:"Arial",sans-serif;color:black'>&nbsp;</span></p>

<p class=MsoNormal style='line-height:12.0pt;text-autospace:none'><span
style='font-family:"Arial",sans-serif;color:black'>Optionally, classes may be loaded
using  “</span><span style='font-family:"Courier New";color:black'>-loadFile</span><span
style='font-family:"Arial",sans-serif;color:black'>”, however for any manipulations
and optimizations it is still necessary that the interface be specified.</span></p>

<p class=MsoNormal style='line-height:12.0pt;text-autospace:none'><span
style='font-family:"Arial",sans-serif;color:black'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif;color:black'>The
 “</span><span style='font-family:"Courier New";color:black'>-loadClass</span><span
style='font-family:"Arial",sans-serif;color:black'>” and  “</span><span
style='font-family:"Courier New";color:black'>–loadResource</span><span
style='font-family:"Arial",sans-serif;color:black'>” options are also used to specify
classes and resources to load, but whether they are identified as internal or external
is dependent upon where they are found, as by the options </span><span
style='font-family:"Arial",sans-serif'> “</span><span style='font-family:"Courier New"'>-icp</span><span
style='font-family:"Arial",sans-serif'>”</span><span style='font-family:"Arial",sans-serif;
color:black'>, </span><span style='font-family:"Arial",sans-serif'> “</span><span
style='font-family:"Courier New"'>-cp</span><span style='font-family:"Arial",sans-serif'>”</span><span
style='font-family:"Arial",sans-serif;color:black'>, and  “</span><span
style='font-family:"Courier New";color:black'>-loadFile</span><span
style='font-family:"Arial",sans-serif;color:black'>”.</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoBodyText><span style='font-family:"Arial",sans-serif'>The  “</span><span
style='font-family:"Courier New"'>-optimize</span><span style='font-family:
"Arial",sans-serif'>” option is capable of making optimizations to bytecode, such
as removing unreachable code and altering certain bytecode sequences.</span></p>

<p class=MsoBodyText><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoBodyText><span style='font-family:"Arial",sans-serif'>The  “</span><span
style='font-family:"Courier New"'>-verify</span><span style='font-family:"Arial",sans-serif'>”
will perform some extensive verification on the internal classes.  This will not
guarantee that verification performed by a java virtual machine will pass, however. 
But it can help to confirm that the classes are well structured or provide helpful
information regarding why the classes are not well-structured.</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><a name="_3.2_Rules_Files"></a><a name="_3.3_Multiple_Load"></a>&nbsp;</p>

<h1><a name="_3.4_Wildcards"></a><a name="_3.3_Wildcards"></a><span
style='font-family:"Arial",sans-serif'>3.2 Wildcards</span></h1>

<p class=MsoNormal><span style='font-size:14.0pt;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>Any option used
to specify a class, field, method or resource will accept wildcards.  The available
wildcards are:</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>*: any sequence
of characters</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>^: any sequence
of characters that does not include either of the separators ‘/’ or ‘.’</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><i><span style='font-family:"Arial",sans-serif'>e.g.</span></i><span
style='font-family:"Arial",sans-serif'> to include all classes in java.lang and
subpackages:</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>-includeClass java.lang.*</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><i><span style='font-family:"Arial",sans-serif'>e.g.</span></i><span
style='font-family:"Arial",sans-serif'> to include all classes in java.lang:</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>-includeClass java.lang.^</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><i><span style='font-family:"Arial",sans-serif'>e.g.</span></i><span
style='font-family:"Arial",sans-serif'> to include the methods in java.lang.Object:</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>-includeMethod java.lang.Object.^</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><i><span style='font-family:"Arial",sans-serif'>e.g.</span></i><span
style='font-family:"Arial",sans-serif'> to include all methods:</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>-includeMethod *</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><i><span style='font-family:"Arial",sans-serif'>e.g.</span></i><span
style='font-family:"Arial",sans-serif'> to include all methods in the default package:</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>-includeMethod ^.^</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><i><span style='font-family:"Arial",sans-serif'>e.g.</span></i><span
style='font-family:"Arial",sans-serif'> to include all classes and their public,
protected and package methods and fields in java.lang and subpackages:</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>-includeLibraryClass
java.lang.* </span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><a name="_3.4_noFollow"></a><a name="_4.6_The_Migrate"></a>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<h1><a name="_4._Additional_Extensions"></a><span style='font-family:"Arial",sans-serif'>4.
Additional Extensions</span></h1>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>Details about the
load extension are in section 3.  This sections lists some additional extensions.</span></p>

<p class=MsoNormal>&nbsp;</p>

<h1><a name="_4.4_The_Jar"></a><span style='font-family:"Arial",sans-serif'>4.1
The Jar Generation Extension</span></h1>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>The jar generation
extension is specified by:</span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>–jarOutput</span></p>

<p class=MsoNormal> </p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>This extension is
used to write all internal classes to jar files.   The target directory or jar file
is specified by: </span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>-output fileName</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>If a directory is
specified, a set of jar files will be created corresponding to the classpath entries
the individual classes were obtained from.</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>There is an option
to specify that the jar entries are not to be compressed,  “</span><span
style='font-family:"Courier New"'>-noCompress</span><span style='font-family:
"Arial",sans-serif'>”.  Any loaded resource can be excluded from the jar files by
specifying the option  “</span><span style='font-family:"Courier New"'>-excludeResource</span><span
style='font-family:"Arial",sans-serif'>”, or optionally the user can use the option
 “</span><span style='font-family:"Courier New"'>-includeZipped</span><span
style='font-family:"Arial",sans-serif'>” to ensure any resource contained within
a jar or zip file on the classpath will be written to the output jar(s).  </span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>This extension also
contains options that allow the user to remove various items from the written classes. 
The user may specify any specific attribute to be removed by using the  “</span><span
style='font-family:"Courier New"'>-removeAttributes</span><span
style='font-family:"Arial",sans-serif'>” option.  The user should consult the java
virtual machine specification for a list of specification-defined attributes that
may be excluded.</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>By default, certain
groups of attributes are automatically removed (<i>Note: this behavior is expected
to change so that removal is no longer the default behavior</i>).  There are options
to override this behaviour.  </span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>To prevent the removal
of attributes used by debuggers use  “</span><span style='font-family:"Courier New"'>-noStripDebugInfo</span><span
style='font-family:"Arial",sans-serif'>”. This will prevent the removal of the attributes
</span><span style='font-family:"Courier New"'>SourceFile</span>,<span
style='font-family:"Courier New"'> SourceDebugExtension</span>,<span
style='font-family:"Courier New"'> LineNumberTable</span>,<span
style='font-family:"Courier New"'> LocalVariableTable</span> <span
style='font-family:"Arial",sans-serif'>and</span> <span style='font-family:
"Courier New"'>LocalVariableTypeTable</span><span style='font-family:"Arial",sans-serif'>.</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>To prevent the removal
of attributes used to denote information about the original source file, use  “</span><span
style='font-family:"Courier New"'>-noStripSourceInfo</span><span
style='font-family:"Arial",sans-serif'>”. This will prevent the removal of the attributes
</span><span style='font-family:"Courier New"'>InnerClasses</span>,<span
style='font-family:"Courier New"'> Synthetic</span>,<span style='font-family:
"Courier New"'> Deprecated</span>,<span style='font-family:"Courier New"'> EnclosingMethod
</span><span style='font-family:"Arial",sans-serif'>and</span> <span
style='font-family:"Courier New"'>Signature</span>.  <span style='font-family:
"Arial",sans-serif'>These attributes have no influence in runtime behaviour other
than influencing information derived from the reflection API.</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>To prevent the removal
of attributes used to store annotation information, use  “</span><span
style='font-family:"Courier New"'>-noStripAnnotations</span><span
style='font-family:"Arial",sans-serif'>”. This will prevent the removal of the attributes</span>
<span style='font-family:"Courier New"'>RuntimeVisibleAnnotations</span>,<span
style='font-family:"Courier New"'> RuntimeInvisibleAnnotations</span>,<span
style='font-family:"Courier New"'> RuntimeVisibleParameterAnnotations</span>,<span
style='font-family:"Courier New"'> RuntimeInvisibleParameterAnnotations </span><span
style='font-family:"Arial",sans-serif'>and</span> <span style='font-family:
"Courier New"'>AnnotationDefault</span>.  <span style='font-family:"Arial",sans-serif'>These
attributes have no influence in runtime behaviour other than influencing information
derived from the reflection API that is annotation related.</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>There are options
to control the removal of the stack map table attributes. The options  “-addStackMaps”
and</span> <span style='font-family:"Arial",sans-serif'> “</span><span
style='font-family:"Courier New"'>-removeStackMaps</span><span
style='font-family:"Arial",sans-serif'>” will add and remove these attributes from
the class files.  The option  “</span><span style='font-family:"Courier New"'>-addStackMaps</span><span
style='font-family:"Arial",sans-serif'>” takes precedence over the options  “</span><span
style='font-family:"Courier New"'>-removeStackMaps</span><span
style='font-family:"Arial",sans-serif'>” and  “</span><span style='font-family:
"Courier New"'>-removeAttributes StackMapTable</span><span style='font-family:
"Arial",sans-serif'>”.</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<h1><a name="_4.6_The_Class"></a><span style='font-family:"Arial",sans-serif'>4.2
The Class File Generation Extension</span></h1>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>The class file generation
extension, specified by the  “</span><span style='font-family:"Courier New"'>–dirOutput</span><span
style='font-family:"Arial",sans-serif'>” option, is used to write all internal classes
to the file system.   The target directory or jar file is specified by the  “</span><span
style='font-family:"Courier New"'>-dir</span><span style='font-family:"Arial",sans-serif'>”
option.</span>  </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>All other options
behave in the exact same way as they do with the jar generation extension.</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><a name="_5._Extensions_available"></a>&nbsp;</p>

<p class=MsoNormal><a name="_4.5_The_Instrument"></a>&nbsp;</p>

</div>

</body>

</html>
