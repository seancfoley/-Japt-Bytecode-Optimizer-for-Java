<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=utf-8">
<meta name=Generator content="Microsoft Word 15 (filtered)">
<title>Writing an extension for JAPT (Java optimizer)</title>
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Helv;
	panose-1:2 11 6 4 2 2 2 3 2 4;}
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	text-autospace:ideograph-other;
	font-size:12.0pt;
	font-family:"Times New Roman",serif;}
h1
	{margin:0in;
	margin-bottom:.0001pt;
	page-break-after:avoid;
	text-autospace:ideograph-other;
	font-size:14.0pt;
	font-family:"Times New Roman",serif;
	font-weight:normal;}
h2
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	page-break-after:avoid;
	text-autospace:ideograph-other;
	font-size:14.0pt;
	font-family:"Arial",sans-serif;
	font-style:italic;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin:0in;
	margin-bottom:.0001pt;
	text-autospace:ideograph-other;
	font-size:10.0pt;
	font-family:"Courier New";}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;}
.MsoChpDefault
	{font-size:10.0pt;}
.MsoPapDefault
	{text-autospace:ideograph-other;}
 /* Page Definitions */
 @page WordSection1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;}
div.WordSection1
	{page:WordSection1;}
-->
</style>

</head>

<body lang=EN-US link=blue vlink=purple>

<div class=WordSection1>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>Back to </span><a
href="index.html"><span style='font-family:"Arial",sans-serif'>Project Pages
Home</span></a></p>

<p class=MsoNormal><b><span style='font-size:20.0pt;font-family:"Arial",sans-serif'>&nbsp;</span></b></p>

<p class=MsoNormal><b><span style='font-size:20.0pt;font-family:"Arial",sans-serif'>Writing
an extension for JAPT</span></b><span style='font-size:16.0pt;font-family:"Arial",sans-serif'>
(</span><b><i><span style='font-size:20.0pt;font-family:"Arial",sans-serif'>Ja</span></i></b><span
style='font-size:16.0pt;font-family:"Arial",sans-serif'>va o</span><b><i><span
style='font-size:20.0pt;font-family:"Arial",sans-serif'>pt</span></i></b><span
style='font-size:16.0pt;font-family:"Arial",sans-serif'>imizer)</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>1 </span><a
href="#_1._Implement_the"><span style='font-family:"Arial",sans-serif'>Implement
the Extension Interface</span></a><span style='font-family:"Arial",sans-serif'>
</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>2 </span><a
href="#_1._Using_the"><span style='font-family:"Arial",sans-serif'>Using the
Message and Logger classes</span></a><a name="_Hlt130635542"></a><a
name="_Hlt130635543"></a></p>

<p class=MsoNormal style='text-indent:.5in'><span style='font-family:"Arial",sans-serif'>2.1
</span><a href="#_2.1_Logger_streams"><span style='font-family:"Arial",sans-serif'>Logger
Streams</span></a></p>

<p class=MsoNormal style='text-indent:.5in'><span style='font-family:"Arial",sans-serif'>2.2
</span><a href="#_2.2_Message_Objects"><span style='font-family:"Arial",sans-serif'>Message
Objects</span></a></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>3 </span><a
href="#_3._The_Japt"><span style='font-family:"Arial",sans-serif'>The Japt
Repository</span></a><a name="_Hlt130636502"></a></p>

<p class=MsoNormal style='margin-left:.5in'><span style='font-family:"Arial",sans-serif'>3.1
</span><a href="#_3.1_Do_not"><span style='font-family:"Arial",sans-serif'>Do
not Alter External Classes</span></a><a name="_Hlt152058124"></a><a
name="_Hlt152058125"></a></p>

<p class=MsoNormal style='text-indent:.5in'><span style='font-family:"Arial",sans-serif'>3.2
</span><a href="#_3.2_Do_not"><span style='font-family:"Arial",sans-serif'>Do
not Alter Identifying Characteristics of the Application Interface</span></a><a
name="_Hlt152058716"></a></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>4 </span><a
href="#_4._The_Code"><span style='font-family:"Arial",sans-serif'>The Code
Attribute</span></a></p>

<p class=MsoNormal style='text-indent:.5in'><span style='font-family:"Arial",sans-serif'>4.1
</span><a href="#_4.1_Inserting,_Replacing"><span style='font-family:"Arial",sans-serif'>Inserting,
Replacing and Removing Instructions</span></a></p>

<p class=MsoNormal style='text-indent:.5in'><span style='font-family:"Arial",sans-serif'>4.2
</span><a href="#_2.2_Message_Objects"><span style='font-family:"Arial",sans-serif'>Creating
Instructions</span></a></p>

<p class=MsoNormal style='text-indent:.5in'><span style='font-family:"Arial",sans-serif'>4.3
</span><a href="#_4.3_Copying_Instructions"><span style='font-family:"Arial",sans-serif'>Copying
Instructions</span></a></p>

<p class=MsoNormal style='text-indent:.5in'><span style='font-family:"Arial",sans-serif'>4.4
</span><a href="#_4.4_Visiting_Instructions"><span style='font-family:"Arial",sans-serif'>Visiting
Instructions</span></a></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>5 </span><a
href="#_5_Running_your"><span style='font-family:"Arial",sans-serif'>Running
your Extension</span></a></p>

<p class=MsoNormal style='text-indent:.5in'><span style='font-family:"Arial",sans-serif'>4.1
</span><a href="#_5.1_Running_from"><span style='font-family:"Arial",sans-serif'>Running
from the Command Line</span></a><a name="_Hlt130730869"></a></p>

<p class=MsoNormal style='text-indent:.5in'><span style='font-family:"Arial",sans-serif'>4.2
</span><a href="#_5.2_Running_in"><span style='font-family:"Arial",sans-serif'>Running
in Java</span></a></p>

<h1><span style='font-size:16.0pt'>&nbsp;</span></h1>

<p class=MsoNormal style='line-height:12.0pt;text-autospace:none'><span
style='font-family:"Arial",sans-serif;color:black'>This document covers the
basic concepts of Japt from a programmer’s perspective (adding an extension to
Japt), rather than a user’s perspective (running existing extensions).</span></p>

<p class=MsoNormal style='line-height:12.0pt;text-autospace:none'><span
style='font-family:"Arial",sans-serif;color:black'>&nbsp;</span></p>

<p class=MsoNormal style='line-height:12.0pt;text-autospace:none'><span
style='font-family:"Arial",sans-serif;color:black'>Japt is composed of the
underlying library JikesBT (com.ibm.jikesbt) and the japt API in the following
packages:</span></p>

<p class=MsoNormal style='line-height:12.0pt;text-autospace:none'><span
style='font-family:"Arial",sans-serif;color:black'>com.ibm.ive.tools.japt</span></p>

<p class=MsoNormal style='line-height:12.0pt;text-autospace:none'><span
style='font-family:"Arial",sans-serif;color:black'>com.ibm.ive.tools.japt.commandLine</span></p>

<p class=MsoNormal style='line-height:12.0pt;text-autospace:none'><span
style='font-family:"Arial",sans-serif;color:black'>com.ibm.ive.tools.japt.commandLine.options</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif;color:black'>com.ibm.ive.tools.commandLine</span></p>

<p class=MsoNormal><span style='color:black'>&nbsp;</span></p>

<p class=MsoNormal><span style='color:black'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-size:16.0pt;font-family:"Arial",sans-serif'>Overview
of the Extension Architecture</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif;color:black'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif;color:black'>Japt
is built with an extension architecture.  It is much like a plugin architecture
except that extensions are defined on the command line.  </span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif;color:black'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif;color:black'>The
idea is that you should simply worry about writing your bytecode or class
manipulation code and you need to do nothing to integrate your code into Japt. 
You can use the existing LoadException to load your classes, you can then run
your own custom, then you can use the ClassGenerationExtension or
JarGenerationExtension to save the altered classes, all of this controlled by
the command line.  The existing Japt architecture does not need to know about
the existence of your extension, and you can easily pick and choose which
existing extensions you need to use with your own.</span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Helv",sans-serif;
color:black'>&nbsp;</span></p>

<p class=MsoNormal>&nbsp;</p>

<h1><a name="_2._Japt_Concepts"></a><a name="_1._Implementing_the"></a><a
name="_1._Implement_the"></a><span style='font-size:16.0pt;font-family:"Arial",sans-serif'>1.
Implement com.ibm.ive.tools.japt.Extension</span></h1>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>Extensions if
Japt must implement the interface com.ibm.ive.tools.japt.Extension.</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>Additionally,
if the extension is to be integrated with the command line version of Japt, the
user must implement the interface
com.ibm.ive.tools.japt.commandLine.CommandLineExtension.</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>The interface
CommandLineExtension has the method getOptions, which provides an array of
command line options.  The extension must provide these objects which the
command line parser will update as it parses the command line.</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>The key method
in the Option interface is the method</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>protected abstract
void handle(String args[], CommandLineParser fromParser) throws
CommandLineException;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>which is called
whenever the given option appears on the command line, along with any arguments
present and the parser which found the option.  There is a single parser for
the command line as well as a new parser for every options file or rules file.</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>The key method
in the Extension class is the method </span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>void
execute(JaptRepository repository, Logger logger) throws ExtensionException;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>This is the
method that will be called by Japt to run your extension.  The JaptRepository
object and the Japt Logger object will be passed to your extension so that it
can alter the classes in the repository and pass any user information to the
logger.</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<h1><a name="_1._Using_the"></a><span style='font-size:16.0pt;font-family:"Arial",sans-serif'>2.
Use the Message and Logger classes</span></h1>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>Information is
directed to the user by calling the appropriate method in
com.ibm.ive.tools.japt.Logger.</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<h1><a name="_2.1_Logger_streams"></a><span style='font-family:"Arial",sans-serif'>2.1
Logger streams</span></h1>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>A logger object
has five streams:</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>1. <i>error</i>:
an error has occurred</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>2. <i>warning</i>:
something unusual or possibly undesirable has occurred that might not be an
error</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>3. <i>information</i>:
something about what Japt or an extension has done</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>4. <i>status</i>:
information that should be presented immediately</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>4. <i>progress</i>:
something regarding the progress of Japt as it runs</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>The logger
object decides where each stream will write its information.  One type of
logger, the StandardLogger, will write the error stream to the standard error
stream and the other three streams to the standard output stream.  </span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>The command
line japt will generate a CommandLineLogger for use by the extensions.</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>On the command
line, the user may specify a log file for japt for use by this logger.  This
logger writes the error stream to the standard error stream.  It writes the
warning and progress streams to the standard output stream.  Additionally, it
will also write the error, warning and information streams to the log file, if
such a file was specified.</span></p>

<p class=MsoNormal>&nbsp;</p>

<h1><a name="_2.2_Message_Objects"></a><span style='font-family:"Arial",sans-serif'>2.2
Message Objects</span></h1>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>Information to
be passed to the user is generally stored in an object of type
com.ibm.ive.tools.japt.Message.  The subclass com.ibm.ive.tools.japt.LogMessage
has additional methods named log which cause the message to be written to the
given logger.  </span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>The message
object itself will decide which logger stream(s) will receive the message. 
Japt defines a subclass for each Logger stream, the ErrorMessage, InfoMessage,
StatusMessage, ProgressMessage and WarningMessage classes, to direct their
contents to their corresponding logger streams.  These are all subclasses of
JaptMessage, which adds a prefix to each message as it is written to identify
the type of message and the component from which it originated.</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>Extension
writers are encouraged to use one of the existing JaptMessage subclasses, or to
subclass JaptMessage itself, when they are creating their own messages for the
user.</span></p>

<h2><span style='font-size:12.0pt;font-style:normal'>Messages with Arguments</span></h2>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>When a
JaptMessage object is logged, it may be passed arguments that are inserted into
the message.  JaptMessage objects that take arguments must be constructed with
the JaptMessage constructor that takes a FormattedString as an argument.  The
FormattedString object will break a message up into components.  Between each
component is where each argument will be inserted. </span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<h1><a name="_3._The_Japt"></a><span style='font-size:16.0pt'> </span><span
style='font-size:16.0pt;font-family:"Arial",sans-serif'>3. The Japt Repository</span></h1>

<p class=MsoNormal><span style='font-size:16.0pt;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>The japt
repository stores all classes and resources that are loaded by japt.  It also
holds the class path entry objects from which more classes and resources may be
loaded.  The resources are stored in the resources vector.  The classes are
stored in the classes vector.  Additionally, those classes which are internal
classes are also stored in the internalClasses vector.</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<h1><a name="_3.1_Do_not"></a><span style='font-family:"Arial",sans-serif'>3.1
Do Not Alter External Classes</span></h1>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>One of the
rules for writing a japt extension is that only internal classes may be
modified.  There are methods in the JaptRepository object that will get all the
internal classes or will determine whether a given class is internal or
external.</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<h1><a name="_3.2_Do_not"></a><span style='font-family:"Arial",sans-serif'>3.2
Do not Alter Identifying Characteristics of the Application Interface</span></h1>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>The application
interface consists of a set of classes, methods and fields that are identified
as possible entry points into the set of internal classes, see </span><a
href="documentation.htm#_2.4_Application_Interface"><span style='font-family:
"Arial",sans-serif'>the Japt documentation</span></a><span style='font-family:
"Arial",sans-serif'> for details.  </span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>The identifying
characteristics of these items are the properties that allow them to be
identified and accessed.</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>Their names
cannot be changed.  Their access permissions can be changed to make them more
accessible, but not less accessible.  They cannot be removed or relocated.  They
cannot be changed from static to non-static and vice-versa.  Method signatures
and field types cannot be changed.  Any other identifying characteristics
cannot be changed.  </span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>Characteristics
that do not identify these items or affect how thet are accessed can be
changed, such as whether they are synchronized, fp-strict, or abstract.  Method
bodies can be changed.  Any non-identifying characteristic can be changed.  </span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<h1><a name="_4._The_Code"></a><span style='font-size:16.0pt;font-family:"Arial",sans-serif'>4.
The Code Attribute</span></h1>

<p class=MsoNormal><span style='font-size:16.0pt;font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>The
BT_CodeAttribute object for a method stores the bytecode instruction vector and
any associated attributes, such as the debug attributes used to debug that
method.  </span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<h1><a name="_3.1_Inserting,_Replacing"></a><a name="_4.1_Inserting,_Replacing"></a><span
style='font-family:"Arial",sans-serif'>4.1 Inserting, Replacing and Removing
Instructions</span></h1>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>When inserting,
removing, or replacing instructions in a code attribute, it is recommended that
the programmer use the associated code attribute methods that being with
“insertInstruction”, “removeInstruction” or “replaceInstruction”.  This ensures
that the instructions are linked and unlinked properly, and additionally the
associated attributes such as the debug attributes will be updated as well.  </span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>If the
programmer chooses not to use the methods provided by the code attribute, then
whenever an instruction is inserted into a code attribute’s vector, it should
have its “</span><span style='font-family:"Courier New"'>link</span><span
style='font-family:"Arial",sans-serif'>” method called.  Also, whenever an
instruction is removed from a code attribute’s instruction vector, it should
have its “</span><span style='font-family:"Courier New"'>unlink</span><span
style='font-family:"Arial",sans-serif'>” method called.   This ensures that any
relationships that have been created by the presence of that instruction are
updated accordingly.  The</span> <span style='font-family:"Courier New"'>unlink</span>
<span style='font-family:"Arial",sans-serif'>and</span> <span style='font-family:
"Courier New"'>link</span> <span style='font-family:"Arial",sans-serif'>methods
may be called more than once on the same instruction with no adverse effects. 
This means that you can add a few instructions to a method and then call link
on all instructions the entire method to ensure all instructions have been
linked at least once.  </span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>Linking and
unlinking code, methods, fields and classes in Japt/JikesBT ensures that any
data structures containing those artifacts are updated.  For instance, for a
method invocation instruction, there is a data structure in the code attribute
indicating the called methods from that code, as well as a data structure in
the method object listing callers.</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>&nbsp;</p>

<h1><span style='font-family:"Arial",sans-serif'>4.2 Creating Instructions</span></h1>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>When creating
instructions, it is recommended that the programmer use the associated “make”
methods in BT_Ins.  This ensures that the correct instruction object is created
for each opcode.  The instruction object hierarchy is documented in the javadoc
comments for the BT_Ins class.</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<h1><a name="_4.3_Copying_Instructions"></a><span style='font-family:"Arial",sans-serif'>4.3
Copying Instructions</span></h1>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>The ideal way
to copy instructions is to use the associated methods in BT_Inliner.  This
ensures that the code attributes which reference the instructions are updated
properly, and the instructions appropriate rules for creating the new
instructions are followed.</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<h1><a name="_4.4_Visiting_Instructions"></a><span style='font-family:"Arial",sans-serif'>4.4
Visiting Instructions</span></h1>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>You may visit
the instructions in the same order in which they are executed by creating a
BT_CodeVisitor object and passing this object to the associated
BT_CodeAttribute.visitReachableCode method.  The code visitor object will
generate information regarding which instructions were visited and a list of
subroutines in the method.</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>If you subclass
BT_CodeVisitor, then there are key methods that you may override in order to
analyze the instructions while they are being visited.  There are existing
subclasses of BT_CodeVisitor that verify instructions, analyze the operation
stack, visit subroutines, and find method invocations on specific objects.</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal>&nbsp;</p>

<h1><a name="_5_Running_your"></a><span style='font-size:16.0pt;font-family:
"Arial",sans-serif'>5 Running your Extension</span></h1>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<h1><a name="_5.1_Running_from"></a><span style='font-family:"Arial",sans-serif'>5.1
Running from the Command Line</span></h1>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>To run your
extension from the command line, it must be a subclass of
CommandLineExtension.  Running it is easy.  Just use:</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>java
–jar japt.jar –extension theExtensionClassName </span>&lt;your extension
options&gt; </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>If your
extension does not load classes, this means that there will be nothing in the
Japt repository for your extension to use.  However, japt automatically runs
the built-in load extension first, so you can use this to load classes.  You
can then use one of japt’s output extensions to write to the file system:</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoBodyText>java –jar japt.jar –loadFile inputClasses.jar –extension
theExtensionClassName &lt;your extension options&gt; –jarOutput –output
outputClasses.jar</p>

<p class=MsoNormal>&nbsp;</p>

<h1><a name="_5.2_Running_in"></a><span style='font-family:"Arial",sans-serif'>5.2
Running in Java</span></h1>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>You may call on
Japt from within your java application.  To do so, you need to create a
factory, a repository, and an instance of japt to run your extensions.</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>Here is an
example:</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>Logger
logger = new StandardLogger();</span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>JaptFactory
factory = new JaptFactory(logger);</span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>JaptRepository
rep = new JaptRepository(factory);</span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>Japt
japt = new Japt(rep);</span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>MyExtension
extension = new MyExtension();</span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>japt.executeExtensions(new
Extension[] {loadExtension, extension,</span></p>

<p class=MsoNormal style='text-indent:.5in'><span style='font-size:10.0pt;
font-family:"Courier New"'> outExtension}, logger);</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>Once again, if
your extension does not load classes, you may wish to make use of the Japt load
extension, and you can use one of the japt output extensions to write the class
files to the file system:</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>Logger
logger = new StandardLogger();</span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>JaptFactory
factory = new JaptFactory(logger);</span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>JaptRepository
rep = new JaptRepository(factory);</span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>Japt
japt = new Japt(rep);</span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>LoadExtension
loadExtension = new LoadExtension();</span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>loadExtension.options.load.add(&quot;inputClasses.jar&quot;);</span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>MyExtension
extension = new MyExtension();</span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>JarGenerationExtension
outExtension = new JarGenerationExtension();</span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>outExtension.target.setValue(&quot;outputClasses.jar&quot;);</span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>japt.executeExtensions(new
Extension[] {loadExtension, extension,</span></p>

<p class=MsoNormal style='text-indent:.5in'><span style='font-size:10.0pt;
font-family:"Courier New"'> outExtension}, logger);</span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New"'>rep.resetClassPath();
//close open jars in classpath</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>All of the
built-in japt extensions have their various options exposed for use in the same
way that they are used from the command line.</span></p>

<p class=MsoNormal><span style='font-family:"Arial",sans-serif'>&nbsp;</span></p>

</div>

</body>

</html>
